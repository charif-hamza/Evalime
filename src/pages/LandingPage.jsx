import React, { useEffect, useCallback } from "react";
import anime from "animejs/lib/anime.es.js";

/* eslint-disable no-irregular-whitespace */

/**
 * A cinematic landing page with subtle yet striking Anime.js animations.
 *
 * ‣ One mount‑time timeline introduces the nav, hero copy and hero visual in a single sweeping motion.
 * ‣ A global IntersectionObserver reveals each `.reveal` element with a polished rise & fade as the user scrolls.
 * ‣ Parallax utility: any element carrying the `data-parallax` attribute will shift based on scroll, letting you sprinkle depth effects anywhere with one line of markup.
 * ‣ Re‑usable `useCardHoverMotion` hook gives feature cards an organic tilt + pop on hover.
 */
export default function LandingPage({ onStart }) {
  /* ──────────────────────────────────── ▼ ANIMATION HOOKS ▼ ──────────────────────────────────── */
  const useCardHoverMotion = () => {
    const onEnter = useCallback((e) => {
      const { width, height, left, top } = e.currentTarget.getBoundingClientRect();
      const handleMove = (evt) => {
        const x = evt.clientX - left - width / 2;
        const y = evt.clientY - top - height / 2;
        anime.set(e.currentTarget, {
          rotateX: (-y / height) * 8,
          rotateY: (x / width) * 8,
          scale: 1.06,
        });
      };
      e.currentTarget.addEventListener("mousemove", handleMove);
      e.currentTarget._cleanup = () => e.currentTarget.removeEventListener("mousemove", handleMove);
    }, []);

    const onLeave = useCallback((e) => {
      e.currentTarget._cleanup?.();
      anime({
        targets: e.currentTarget,
        rotateX: 0,
        rotateY: 0,
        scale: 1,
        easing: "easeOutExpo",
        duration: 600,
      });
    }, []);

    return { onEnter, onLeave };
  };

  /* ──────────────────────────────────── ▼ EFFECTS ▼ ──────────────────────────────────── */
  // Hero / nav entrance
  useEffect(() => {
    anime.set("header", { opacity: 0, translateY: -32 });
    anime.set(".hero-heading span", { opacity: 0, translateY: 60 });
    anime.set(".hero-subtitle", { opacity: 0, translateY: 30 });
    anime.set(".cta-buttons", { opacity: 0, scale: 0.9 });
    anime.set(".hero-visual", { opacity: 0, scale: 0.8, rotate: 10 });

    anime
      .timeline({ easing: "easeOutExpo", duration: 900 })
      .add({ targets: "header", opacity: 1, translateY: 0 })
      .add(
        {
          targets: ".hero-heading span",
          opacity: 1,
          translateY: 0,
          delay: anime.stagger(70),
        },
        "-=400"
      )
      .add({ targets: ".hero-subtitle", opacity: 1, translateY: 0 }, "-=600")
      .add({ targets: ".cta-buttons", opacity: 1, scale: 1 }, "-=550")
      .add(
        { targets: ".hero-visual", opacity: 1, scale: 1, rotate: 0 },
        "-=700"
      );
  }, []);

  // Parallax + reveal‑on‑scroll
  useEffect(() => {
    /* Parallax */
    const onScroll = () => {
      const s = window.scrollY;
      document.querySelectorAll("[data-parallax]").forEach((el) => {
        const speed = parseFloat(el.getAttribute("data-parallax")) || 0.25;
        el.style.transform = `translateY(${s * speed}px)`;
      });
    };
    window.addEventListener("scroll", onScroll, { passive: true });

    /* Reveal */
    const revealEls = document.querySelectorAll(".reveal");
    anime.set(revealEls, { opacity: 0, translateY: 60 });
    const io = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            anime({
              targets: entry.target,
              opacity: 1,
              translateY: 0,
              easing: "easeOutExpo",
              duration: 900,
            });
            io.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.4 }
    );
    revealEls.forEach((el) => io.observe(el));

    return () => {
      window.removeEventListener("scroll", onScroll);
      io.disconnect();
    };
  }, []);

  /* ──────────────────────────────────── ▼ DATA ▼ ──────────────────────────────────── */
  const features = [
    {
      title: "AI‑Driven Insights",
      desc: "Context‑aware explanations generated by our proprietary large‑language‑model pipeline for every answer.",
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-8 w-8 text-emerald-400">
          <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
      ),
    },
    {
      title: "Adaptive Difficulty",
      desc: "Question difficulty adapts in real‑time to keep you in the optimal learning zone.",
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-8 w-8 text-emerald-400">
          <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 12h16.5M12 3.75v16.5" />
        </svg>
      ),
    },
    {
      title: "Real‑Time Analytics",
      desc: "Beautiful dashboards surface strengths and blind‑spots before exam day.",
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-8 w-8 text-emerald-400">
          <path strokeLinecap="round" strokeLinejoin="round" d="M3 3v18h18M7 15v3m4-8v8m4-12v12" />
        </svg>
      ),
    },
  ];

  const { onEnter, onLeave } = useCardHoverMotion();

  /* ──────────────────────────────────── ▼ MARKUP ▼ ──────────────────────────────────── */
  return (
    <div className="relative w-full min-h-screen overflow-x-hidden bg-slate-950 text-white">
      {/* Decorative floating blobs */}
      <div className="pointer-events-none absolute inset-0 -z-10 overflow-hidden">
        <div className="absolute -top-24 left-1/2 h-96 w-96 -translate-x-1/2 rounded-full bg-emerald-500/20 blur-3xl" data-parallax="0.25" />
        <div className="absolute bottom-0 right-0 h-96 w-96 translate-x-1/3 translate-y-1/3 rounded-full bg-lime-500/20 blur-3xl" data-parallax="0.1" />
      </div>

      {/* Navigation */}
      <header className="mx-auto flex max-w-7xl items-center justify-between px-6 py-6 shadow-sm backdrop-blur-lg">
        <span className="text-2xl font-extrabold tracking-tight drop-shadow-lg bg-gradient-to-r from-emerald-400 via-lime-400 to-green-600 bg-clip-text text-transparent">
          EvaLime
        </span>
        <button className="btn btn-outline btn-sm" onClick={onStart}>
          Sign&nbsp;in
        </button>
      </header>

      {/* Hero */}
      <section className="mx-auto flex max-w-7xl flex-col items-center gap-16 px-6 py-24 md:flex-row md:gap-32 md:py-40">
        {/* Hero copy */}
        <div className="text-center md:w-1/2 md:text-left">
          <h1 className="hero-heading text-[clamp(2.75rem,6vw,4.5rem)] font-extrabold leading-tight">
            {"Learn ".split("").map((c, i) => (
              <span key={i}>{c}</span>
            ))}
            <span className="bg-gradient-to-r from-emerald-400 via-lime-400 to-green-600 bg-clip-text text-transparent">smarter</span>
            <span>,</span>
            <br className="hidden md:block" />
            {" score ".split("").map((c, i) => (
              <span key={i + 20}>{c}</span>
            ))}
            <span className="bg-gradient-to-r from-emerald-400 via-lime-400 to-green-600 bg-clip-text text-transparent">higher</span>
          </h1>
          <p className="hero-subtitle mt-6 max-w-xl text-lg text-slate-300 md:text-xl">
            EvaLime harnesses next‑gen AI to transform ordinary multiple‑choice practice into a personalised, data‑driven learning experience.
          </p>
          <div className="cta-buttons mt-10 flex flex-wrap items-center justify-center gap-4 md:justify-start">
            <button className="btn btn-primary px-8 text-base" onClick={onStart}>
              Get&nbsp;Started
            </button>
            <a href="#features" className="btn btn-ghost px-8 text-base text-slate-300 hover:text-white">
              Learn&nbsp;More
            </a>
          </div>
        </div>

        {/* Hero visual */}
        <div className="hero-visual relative flex h-72 w-full items-center justify-center md:h-80 md:w-1/2">
          <svg className="absolute h-80 w-80" viewBox="0 0 360 360" fill="none">
            <circle
              cx="180"
              cy="180"
              r="170"
              stroke="#34d399"
              strokeWidth="2"
              className="[stroke-dasharray:1070] [stroke-dashoffset:1070]"
            >
              {/* Will be animated via inline script below */}
            </circle>
          </svg>
          <div className="absolute h-72 w-72 animate-pulse-slow animate-spin-slower rounded-full border-8 border-emerald-400/30" data-parallax="0.15" />
          <div className="absolute h-60 w-60 animate-pulse-slow animate-spin-slower rounded-full border-8 border-lime-400/20" style={{ animationDelay: "0.2s" }} data-parallax="0.18" />
          <div className="absolute h-48 w-48 animate-pulse-slow animate-spin-slower rounded-full border-8 border-green-600/10" style={{ animationDelay: "0.4s" }} data-parallax="0.2" />
        </div>
      </section>

      {/* Features */}
      <section id="features" className="mx-auto max-w-7xl space-y-16 px-6 py-24 sm:py-32">
        <h2 className="text-center text-4xl font-bold tracking-tight sm:text-5xl">Built for ambitious learners</h2>
        <div className="grid gap-8 md:grid-cols-3">
          {features.map((f) => (
            <div
              key={f.title}
              className="group relative overflow-hidden rounded-xl bg-slate-900/50 p-8 shadow-xl backdrop-blur reveal"
              onMouseEnter={onEnter}
              onMouseLeave={onLeave}
            >
              <div className="mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-slate-800 transition group-hover:bg-emerald-600">
                {f.icon}
              </div>
              <h3 className="mb-2 text-xl font-semibold">{f.title}</h3>
              <p className="text-sm text-slate-400">{f.desc}</p>
            </div>
          ))}
        </div>
      </section>

      {/* CTA */}
      <section className="relative isolate overflow-hidden py-24 sm:py-32 reveal">
        <div className="absolute inset-0 -z-10 bg-gradient-to-b from-emerald-600/40 via-emerald-700/30 to-transparent blur-xl" />
        <div className="mx-auto max-w-4xl px-6 text-center">
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">Ready to see your scores soar?</h2>
          <p className="mt-4 text-lg leading-8 text-slate-300">Join thousands of learners leveraging EvaLime to ace their next exam.</p>
          <button className="btn btn-accent mt-10 px-10 text-base" onClick={onStart}>
            Start Practicing
          </button>
        </div>
      </section>

      {/* Footer */}
      <footer className="border-t-4 border-emerald-600/50 px-6 py-10 text-center text-sm text-slate-500">
        © {new Date().getFullYear()} EvaLime. Crafted with <span role="img" aria-label="love">❤️</span> & TailwindCSS.
      </footer>

      {/* Inline Anime.js for SVG path draw */}
      <script
        dangerouslySetInnerHTML={{
          __html: `(()=>{const circle=document.querySelector('circle[stroke-dasharray]');if(!circle)return;const l=circle.getTotalLength();circle.style.strokeDasharray=l;circle.style.strokeDashoffset=l;anime({targets:circle,strokeDashoffset:[l,0],easing:'easeInOutSine',duration:2500,delay:500});})();`,
        }}
      />
    </div>
  );
}
